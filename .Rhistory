ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
legend.position = "none")+
ggplot2::labs(title = "By-Class Specificity")
f<-(b+c)/(d+e)+
patchwork::plot_layout(guides = "collect")
f
}
library(GrainBreed)
devtools::load_all(".")
?plot_locus_perm_cv
#### for locus_perm_cv ####
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("genecomp")
#run permutational analysis
fit<-locus_perm_cv(n_perms = 2, #the number of permutations
geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
percent_testing=0.2, #percentage of genotypes in the validation set
percent_training=0.8, #percentage of genotypes in the training set
include_hets=T, #excludes hets in the model
include_models=F, #excludes models in results object
verbose = T) #excludes text
#### for plot_locus_perm_cv ####
plot_locus_perm_cv(fit)
devtools::load_all(".")
#### for plot_locus_perm_cv ####
plot_locus_perm_cv(fit)
#run permutational analysis
fit<-locus_perm_cv(n_perms = 3, #the number of permutations
geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
percent_testing=0.2, #percentage of genotypes in the validation set
percent_training=0.8, #percentage of genotypes in the training set
include_hets=F, #excludes hets in the model
include_models=F, #excludes models in results object
verbose = F) #excludes text
#### for plot_locus_perm_cv ####
plot_locus_perm_cv(fit)
devtools::load_all(".")
?plot_locus_perm_cv
devtools::load_all(".")
?plot_locus_perm_cv
library(utils)
rename("GrainBreed", "HapploMapper")
library(devtools)
library(HaploMapper)
devtools::load_all(".")
?locus_cv
?locus_perm_cv
library(devtools)
?use_mit_license
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("genecomp")
#run the function with hets
fit1<-locus_cv(geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
percent_testing=0.2, #percentage of genotypes in the validation set
percent_training=0.8, #percentage of genotypes in the training set
include_hets=T, #include hets in the model
include_models=T, #include models in the final results
verbose = T) #allows for text and graph output
#fun the function without hets
fit2<-locus_cv(geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
percent_testing=0.2, #percentage of genotypes in the validation set
percent_training=0.8, #percentage of genotypes in the training set
include_hets=F, #excludes hets in the model
include_models=F, #excludes models in the final results
verbose = T) #silences function
#### for locus_perm_cv ####
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("genecomp")
#run permutational analysis
fit<-locus_perm_cv(n_perms = 3, #the number of permutations
geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
percent_testing=0.2, #percentage of genotypes in the validation set
percent_training=0.8, #percentage of genotypes in the training set
include_hets=F, #excludes hets in the model
include_models=F, #excludes models in results object
verbose = F) #excludes text
#### for plot_locus_perm_cv ####
plot_locus_perm_cv(fit)
?install_github
install_github("Zachary Winn/zjwinn")
library(HaploMapper)
citation(HaploMapper)
citation("HaploMapper")
devtools::load_all(".")
citation("HaploMapper")
devtools::load_all(".")
citation("HaploMapper")
citation("HaploMapper")
citation("HaploMapper")
devtools::load_all(".")
devtools::load_all(".")
citation("HaploMapper")
devtools::load_all(".")
citation("HaploMapper")
citation("HaploMapper")
citation("HaploMapper")
citation("HaploMapper")
citation("HaploMapper")
library(HaploMapper)
library(devtools)
use_package("knitr")
use_package("patchwork")
use_mit_license()
?locus_cv
library(HaploMapper)
?locus_cv
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("genecomp")
#run the function with hets
fit1<-locus_cv(geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
percent_testing=0.2, #percentage of genotypes in the validation set
percent_training=0.8, #percentage of genotypes in the training set
include_hets=T, #include hets in the model
include_models=T, #include models in the final results
verbose = T) #allows for text and graph output
#fun the function without hets
fit2<-locus_cv(geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
percent_testing=0.2, #percentage of genotypes in the validation set
percent_training=0.8, #percentage of genotypes in the training set
include_hets=F, #excludes hets in the model
include_models=F, #excludes models in the final results
verbose = F) #silences function
?cor
Accuracy<-Kappa<-Sensitivity<-Specificity<-Model<-Class<-NULL
#### for locus_perm_cv ####
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("genecomp")
#run permutational analysis
fit<-locus_perm_cv(n_perms = 2, #the number of permutations
geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
percent_testing=0.2, #percentage of genotypes in the validation set
percent_training=0.8, #percentage of genotypes in the training set
include_hets=FALSE, #excludes hets in the model
include_models=FALSE, #excludes models in results object
verbose = FALSE) #excludes text
remove(fit)
n_perm=2
gene_name=unique(genecomp$Gene)
chromosome="3B"
ncor_markers=50
percent_testing=0.2
percent_training=0.8
include_hets=FALSE
include_models=FALSE
verbose=FALSE
#make an object for the results
results<-base::list()
#announce
base::print(base::paste("Conducting permutational cross validation for", gene_name))
base::print("0% complete!")
for(i in 1:n_perms){
#run function
a<-HaploMapper::locus_cv(geno_mat = geno_mat,
gene_file = gene_file,
gene_name = gene_name,
marker_info = marker_info,
chromosome = chromosome,
ncor_markers = ncor_markers,
percent_testing = percent_testing,
percent_training = percent_training,
include_hets = include_hets,
include_models = include_models,
verbose = verbose)
#put in a list object
results[[base::paste("Permutation_", i, sep = "")]]<-a
#calc percent and announce
a<-i
a<-base::paste(base::round((a/n_perms)*100,0), "%", sep = "")
base::print(base::paste(a, "complete!"))
#remove
remove(a)
}
n_perms=2
for(i in 1:n_perms){
#run function
a<-HaploMapper::locus_cv(geno_mat = geno_mat,
gene_file = gene_file,
gene_name = gene_name,
marker_info = marker_info,
chromosome = chromosome,
ncor_markers = ncor_markers,
percent_testing = percent_testing,
percent_training = percent_training,
include_hets = include_hets,
include_models = include_models,
verbose = verbose)
#put in a list object
results[[base::paste("Permutation_", i, sep = "")]]<-a
#calc percent and announce
a<-i
a<-base::paste(base::round((a/n_perms)*100,0), "%", sep = "")
base::print(base::paste(a, "complete!"))
#remove
remove(a)
}
gene_file=genecomp
for(i in 1:n_perms){
#run function
a<-HaploMapper::locus_cv(geno_mat = geno_mat,
gene_file = gene_file,
gene_name = gene_name,
marker_info = marker_info,
chromosome = chromosome,
ncor_markers = ncor_markers,
percent_testing = percent_testing,
percent_training = percent_training,
include_hets = include_hets,
include_models = include_models,
verbose = verbose)
#put in a list object
results[[base::paste("Permutation_", i, sep = "")]]<-a
#calc percent and announce
a<-i
a<-base::paste(base::round((a/n_perms)*100,0), "%", sep = "")
base::print(base::paste(a, "complete!"))
#remove
remove(a)
}
#make object for results
return_results<-base::list()
#summarize results
if(include_hets==T){
a<-base::c()
#pull summaries
for(i in base::names(results)){
b<-base::as.data.frame(base::t(results[[i]]$confusion_matrices$knn$overall))
b$Model="K-Nearest Neighbors"
b$Permutation=base::gsub("Permutation_", "", i)
c<-base::as.data.frame(base::t(results[[i]]$confusion_matrices$rf$overall))
c$Model="Random Forest"
c$Permutation=base::gsub("Permutation_", "", i)
a<-rbind(a,b,c)
remove(b,c)
}
base::colnames(a)<-c("Accuracy",
"Kappa",
"Accuracy_Lower_CI",
"Accuracy_Upper_CI",
"Accuracy_Null",
"Accuracy_P_Value",
"Mcnemar_P_Value",
"Model",
"Permutation")
a<-a[,c("Permutation",
"Model",
"Accuracy",
"Kappa",
"Accuracy_Lower_CI",
"Accuracy_Upper_CI",
"Accuracy_Null",
"Accuracy_P_Value",
"Mcnemar_P_Value")]
a$Permutation<-base::as.numeric(a$Permutation)
return_results[["Overall_Parameters"]]<-a
remove(a)
a<-base::c()
#pull summaries for by class
for(i in base::names(results)){
b<-base::as.data.frame(results[[i]]$confusion_matrices$knn$byClass)
b$Model="K-Nearest Neighbors"
b$Class=base::gsub("Class: ", "", base::rownames(b))
b$Permutation=base::gsub("Permutation_", "", i)
base::rownames(b)=NULL
c<-base::as.data.frame(results[[i]]$confusion_matrices$rf$byClass)
c$Model="Random Forest"
c$Class=base::gsub("Class: ", "", base::rownames(c))
c$Permutation=base::gsub("Permutation_", "", i)
base::rownames(c)=NULL
c$Permutation=base::gsub("Permutation_", "", i)
a<-rbind(a,b,c)
remove(b,c)
}
a<-a[,c(14,12,13,1,2,5,6,11)]
base::colnames(a)[8]="Balanced_Accuracy"
base::rownames(a)=NULL
a$Permutation<-base::as.numeric(a$Permutation)
return_results[["By_Class_Parameters"]]<-a
remove(a)
#summarize
a<-stats::aggregate(. ~ Model, data=return_results$Overall_Parameters[,2:4], base::mean)
base::colnames(a)[2:3]=base::paste("Mean_", base::colnames(a)[2:3], sep = "")
b<-stats::aggregate(. ~ Model, data=return_results$Overall_Parameters[,2:4], base::min)
base::colnames(b)[2:3]=base::paste("Min_", base::colnames(b)[2:3], sep = "")
c<-stats::aggregate(. ~ Model, data=return_results$Overall_Parameters[,2:4], base::max)
base::colnames(c)[2:3]=base::paste("Max_", base::colnames(c)[2:3], sep = "")
d<-stats::aggregate(. ~ Model, data=return_results$Overall_Parameters[,2:4], stats::sd)
base::colnames(d)[2:3]=base::paste("SD_", base::colnames(d)[2:3], sep = "")
a<-base::cbind(a, b[,2:3],c[,2:3],d[,2:3])
a<-a[,c("Model",
"Mean_Accuracy",
"Min_Accuracy",
"Max_Accuracy",
"SD_Accuracy",
"Mean_Kappa",
"Min_Kappa",
"Max_Kappa",
"SD_Kappa")]
return_results[["Overall_Summary"]]<-a
remove(a,b,c,d)
#summarize
a<-stats::aggregate(. ~ Model+Class, data=return_results$By_Class_Parameters[,2:base::ncol(return_results$By_Class_Parameters)], base::mean)
base::colnames(a)[3:base::ncol(a)]=base::paste("Mean_", base::colnames(a)[3:base::ncol(a)], sep = "")
b<-stats::aggregate(. ~ Model+Class, data=return_results$By_Class_Parameters[,2:base::ncol(return_results$By_Class_Parameters)], base::min)
base::colnames(b)[3:base::ncol(b)]=base::paste("Min_", base::colnames(b)[3:base::ncol(b)], sep = "")
c<-stats::aggregate(. ~ Model+Class, data=return_results$By_Class_Parameters[,2:base::ncol(return_results$By_Class_Parameters)], base::max)
base::colnames(c)[3:base::ncol(c)]=base::paste("Max_", base::colnames(c)[3:base::ncol(c)], sep = "")
d<-stats::aggregate(. ~ Model+Class, data=return_results$By_Class_Parameters[,2:base::ncol(return_results$By_Class_Parameters)], stats::sd)
base::colnames(d)[3:base::ncol(d)]=base::paste("SD_", base::colnames(d)[3:base::ncol(d)], sep = "")
a<-base::cbind(a, b[,3:base::ncol(b)],c[,3:base::ncol(c)],d[,3:base::ncol(d)])
a<-a[,c("Model",
"Class",
"Mean_Sensitivity",
"Min_Sensitivity",
"Max_Sensitivity",
"SD_Sensitivity",
"Mean_Specificity",
"Min_Specificity",
"Max_Specificity",
"SD_Specificity",
"Mean_Precision",
"Min_Precision",
"Max_Precision",
"SD_Precision",
"Mean_Recall",
"Min_Recall",
"Max_Recall",
"SD_Recall",
"Mean_Balanced_Accuracy",
"Min_Balanced_Accuracy",
"Max_Balanced_Accuracy",
"SD_Balanced_Accuracy")]
return_results[["By_Class_Summary"]]<-a
remove(a,b,c,d)
}else if(include_hets==F){
a<-base::c()
#pull summaries for overall
for(i in base::names(results)){
b<-base::as.data.frame(base::t(results[[i]]$confusion_matrices$knn$overall))
b$Model="K-Nearest Neighbors"
b$Permutation=base::gsub("Permutation_", "", i)
c<-base::as.data.frame(base::t(results[[i]]$confusion_matrices$rf$overall))
c$Model="Random Forest"
c$Permutation=base::gsub("Permutation_", "", i)
a<-rbind(a,b,c)
remove(b,c)
}
base::colnames(a)<-c("Accuracy",
"Kappa",
"Accuracy_Lower_CI",
"Accuracy_Upper_CI",
"Accuracy_Null",
"Accuracy_P_Value",
"Mcnemar_P_Value",
"Model",
"Permutation")
a<-a[,c("Permutation",
"Model",
"Accuracy",
"Kappa",
"Accuracy_Lower_CI",
"Accuracy_Upper_CI",
"Accuracy_Null",
"Accuracy_P_Value",
"Mcnemar_P_Value")]
a$Permutation<-base::as.numeric(a$Permutation)
return_results[["Overall_Parameters"]]<-a
remove(a)
a<-base::c()
#pull summaries for by class
for(i in base::names(results)){
b<-base::as.data.frame(base::t(results[[i]]$confusion_matrices$knn$byClass))
b$Model="K-Nearest Neighbors"
b$Permutation=base::gsub("Permutation_", "", i)
c<-base::as.data.frame(base::t(results[[i]]$confusion_matrices$rf$byClass))
c$Model="Random Forest"
c$Permutation=base::gsub("Permutation_", "", i)
a<-rbind(a,b,c)
remove(b,c)
}
a<-a[,c(13,12,1,2,5,6,11)]
base::colnames(a)[7]="Balanced_Accuracy"
base::rownames(a)=NULL
a$Permutation<-base::as.numeric(a$Permutation)
return_results[["By_Class_Parameters"]]<-a
remove(a)
#summarize
a<-stats::aggregate(. ~ Model, data=return_results$Overall_Parameters[,2:4], base::mean)
base::colnames(a)[2:3]=base::paste("Mean_", base::colnames(a)[2:3], sep = "")
b<-stats::aggregate(. ~ Model, data=return_results$Overall_Parameters[,2:4], base::min)
base::colnames(b)[2:3]=base::paste("Min_", base::colnames(b)[2:3], sep = "")
c<-stats::aggregate(. ~ Model, data=return_results$Overall_Parameters[,2:4], base::max)
base::colnames(c)[2:3]=base::paste("Max_", base::colnames(c)[2:3], sep = "")
d<-stats::aggregate(. ~ Model, data=return_results$Overall_Parameters[,2:4], stats::sd)
base::colnames(d)[2:3]=base::paste("SD_", base::colnames(d)[2:3], sep = "")
a<-base::cbind(a, b[,2:3],c[,2:3],d[,2:3])
a<-a[,c("Model",
"Mean_Accuracy",
"Min_Accuracy",
"Max_Accuracy",
"SD_Accuracy",
"Mean_Kappa",
"Min_Kappa",
"Max_Kappa",
"SD_Kappa")]
return_results[["Overall_Summary"]]<-a
remove(a,b,c,d)
#summarize
a<-stats::aggregate(. ~ Model, data=return_results$By_Class_Parameters[,2:base::ncol(return_results$By_Class_Parameters)], base::mean)
base::colnames(a)[2:base::ncol(a)]=base::paste("Mean_", base::colnames(a)[2:base::ncol(a)], sep = "")
b<-stats::aggregate(. ~ Model, data=return_results$By_Class_Parameters[,2:base::ncol(return_results$By_Class_Parameters)], base::min)
base::colnames(b)[2:base::ncol(b)]=base::paste("Min_", base::colnames(b)[2:base::ncol(b)], sep = "")
c<-stats::aggregate(. ~ Model, data=return_results$By_Class_Parameters[,2:base::ncol(return_results$By_Class_Parameters)], base::max)
base::colnames(c)[2:base::ncol(c)]=base::paste("Max_", base::colnames(c)[2:base::ncol(c)], sep = "")
d<-stats::aggregate(. ~ Model, data=return_results$By_Class_Parameters[,2:base::ncol(return_results$By_Class_Parameters)], stats::sd)
base::colnames(d)[2:base::ncol(d)]=base::paste("SD_", base::colnames(d)[2:base::ncol(d)], sep = "")
a<-base::cbind(a, b[,2:base::ncol(b)],c[,2:base::ncol(c)],d[,2:base::ncol(d)])
a<-a[,c("Model",
"Mean_Sensitivity",
"Min_Sensitivity",
"Max_Sensitivity",
"SD_Sensitivity",
"Mean_Specificity",
"Min_Specificity",
"Max_Specificity",
"SD_Specificity",
"Mean_Precision",
"Min_Precision",
"Max_Precision",
"SD_Precision",
"Mean_Recall",
"Min_Recall",
"Max_Recall",
"SD_Recall",
"Mean_Balanced_Accuracy",
"Min_Balanced_Accuracy",
"Max_Balanced_Accuracy",
"SD_Balanced_Accuracy")]
return_results[["By_Class_Summary"]]<-a
remove(a)
}
#put the raw results in the object
return_results[["Raw_Permutation_Info"]]<-results
View(return_results)
?locus_perm_cv
devtools::load_all(".")
?locus_perm_cv
devtools::load_all(".")
?locus_perm_cv
library(HaploMapper)
