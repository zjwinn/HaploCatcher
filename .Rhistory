Chromosome=c(1, 1, 1),
BP_Position=c(0.0,
0.5,
1.2))
knitr::kable(a, align = "c", caption = "Marker Info Input File Example")
url <- "https://github.com/zjwinn/HaploCatcher/blob/main/Figure1_For_I_T_HC.png"
knitr::include_graphics(url)
url<-"https://raw.githubusercontent.com/zjwinn/HaploCatcher/main/Figure1_For_I_T_HC.png"
knitr::include_graphics(url)
```{r, figure_1, echo=FALSE, out.width="150%", fig.align='center'}
?knitr::include_graphics()
#set seed (for reproducablility)
set.seed(022294)
#randomly partition the training data and test from total
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
#nullify the seed we set so we don't mess with cross validation
set.seed(NULL)
#run with hets sequentially
results1<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
set_seed = 022294,
include_hets = TRUE)
library(HaploCatcher)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
out.width="100%"
)
# Chunk 2: setup
#library
library(HaploCatcher)
library(lattice)
library(ggplot2)
#read data from package
data("geno_mat")
data("gene_comp")
data("marker_info")
# Chunk 3
knitr::kable(head(gene_comp), align = "c", caption = "Gene Compendium Input File")
# Chunk 4
knitr::kable(data.frame(Call=unique(gene_comp$Call)), align = "c", caption = "Haplotype Calls")
# Chunk 5
a<-data.frame(FullSampleName=c("Geno_1", "Geno_2", "Geno_3"),
Chromosome=rep("5D", 3),
Gene=rep("pm34", 3),
Call=c("pm34", "het_pm34", "non_pm34"))
knitr::kable(a, align = "c", caption = "Pm34 Example Input File")
# Chunk 6
#must define as a matrix
geno_mat<-as.matrix(geno_mat)
#see head
knitr::kable(geno_mat[1:5, 1:5], align = "c", caption = "Marker Matrix Input File")
# Chunk 7
knitr::kable(head(marker_info), align = "c", caption = "Marker Info Input File")
# Chunk 8
a<-data.frame(Marker=c("TRACE_00102",
"TRACE_13112",
"TRACE_43821"),
Chromosome=c(1, 1, 1),
BP_Position=c(0.0,
0.5,
1.2))
knitr::kable(a, align = "c", caption = "Marker Info Input File Example")
# Chunk 9
url<-"https://raw.githubusercontent.com/zjwinn/HaploCatcher/main/Figure1_For_I_T_HC.png"
knitr::include_graphics(url)
# Chunk 10
#library
library(HaploCatcher)
#read data from package
data("geno_mat")
data("gene_comp")
data("marker_info")
# Chunk 11
#set seed (for reproducablility)
set.seed(022294)
#randomly partition the training data and test from total
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
#nullify the seed we set so we don't mess with cross validation
set.seed(NULL)
library(HaploCatcher)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
out.width="100%"
)
# Chunk 2: setup
#library
library(HaploCatcher)
library(lattice)
library(ggplot2)
#read data from package
data("geno_mat")
data("gene_comp")
data("marker_info")
# Chunk 3
knitr::kable(head(gene_comp), align = "c", caption = "Gene Compendium Input File")
# Chunk 4
knitr::kable(data.frame(Call=unique(gene_comp$Call)), align = "c", caption = "Haplotype Calls")
# Chunk 5
a<-data.frame(FullSampleName=c("Geno_1", "Geno_2", "Geno_3"),
Chromosome=rep("5D", 3),
Gene=rep("pm34", 3),
Call=c("pm34", "het_pm34", "non_pm34"))
knitr::kable(a, align = "c", caption = "Pm34 Example Input File")
# Chunk 6
#must define as a matrix
geno_mat<-as.matrix(geno_mat)
#see head
knitr::kable(geno_mat[1:5, 1:5], align = "c", caption = "Marker Matrix Input File")
# Chunk 7
knitr::kable(head(marker_info), align = "c", caption = "Marker Info Input File")
# Chunk 8
a<-data.frame(Marker=c("TRACE_00102",
"TRACE_13112",
"TRACE_43821"),
Chromosome=c(1, 1, 1),
BP_Position=c(0.0,
0.5,
1.2))
knitr::kable(a, align = "c", caption = "Marker Info Input File Example")
# Chunk 9
url<-"https://raw.githubusercontent.com/zjwinn/HaploCatcher/main/Figure1_For_I_T_HC.png"
knitr::include_graphics(url)
# Chunk 10
#library
library(HaploCatcher)
#read data from package
data("geno_mat")
data("gene_comp")
data("marker_info")
# Chunk 11
#set seed (for reproducablility)
set.seed(022294)
#randomly partition the training data and test from total
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
#nullify the seed we set so we don't mess with cross validation
set.seed(NULL)
#run without heterozygous individuals sequentially
results1<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
set_seed = 022294)
library(HaploCatcher)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
out.width="100%"
)
# Chunk 2: setup
#library
library(HaploCatcher)
library(lattice)
library(ggplot2)
#read data from package
data("geno_mat")
data("gene_comp")
data("marker_info")
# Chunk 3
knitr::kable(head(gene_comp), align = "c", caption = "Gene Compendium Input File")
# Chunk 4
knitr::kable(data.frame(Call=unique(gene_comp$Call)), align = "c", caption = "Haplotype Calls")
# Chunk 5
a<-data.frame(FullSampleName=c("Geno_1", "Geno_2", "Geno_3"),
Chromosome=rep("5D", 3),
Gene=rep("pm34", 3),
Call=c("pm34", "het_pm34", "non_pm34"))
knitr::kable(a, align = "c", caption = "Pm34 Example Input File")
# Chunk 6
#must define as a matrix
geno_mat<-as.matrix(geno_mat)
#see head
knitr::kable(geno_mat[1:5, 1:5], align = "c", caption = "Marker Matrix Input File")
# Chunk 7
knitr::kable(head(marker_info), align = "c", caption = "Marker Info Input File")
# Chunk 8
a<-data.frame(Marker=c("TRACE_00102",
"TRACE_13112",
"TRACE_43821"),
Chromosome=c(1, 1, 1),
BP_Position=c(0.0,
0.5,
1.2))
knitr::kable(a, align = "c", caption = "Marker Info Input File Example")
# Chunk 9
url<-"https://raw.githubusercontent.com/zjwinn/HaploCatcher/main/Figure1_For_I_T_HC.png"
knitr::include_graphics(url)
# Chunk 10
#library
library(HaploCatcher)
#read data from package
data("geno_mat")
data("gene_comp")
data("marker_info")
# Chunk 11
#set seed (for reproducablility)
set.seed(022294)
#randomly partition the training data and test from total
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
#nullify the seed we set so we don't mess with cross validation
set.seed(NULL)
#run without heterozygous individuals sequentially
results1<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
set_seed = 022294)
library(HaploCatcher)
#run with heterozygous individuals in parallel
results2<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
set_seed = 022294,
include_hets = TRUE,
parallel = TRUE)
knitr::kable(head(results1$predictions), align = "c", caption = "Heterozygous Excluded Results")
knitr::kable(head(results2$predictions), align = "c", caption = "Heterozygous Included Results")
knitr::kable(results1$predictions, align = "c", caption = "Heterozygous Excluded Results")
knitr::kable(results2$predictions, align = "c", caption = "Heterozygous Included Results")
knitr::kable(results1$predictions[1:10,], align = "c", caption = "Heterozygous Excluded Results")
knitr::kable(results2$predictions[1:10,], align = "c", caption = "Heterozygous Included Results")
knitr::kable(results1$predictions[1:15,], align = "c", caption = "Heterozygous Excluded Results")
knitr::kable(results2$predictions[1:15,], align = "c", caption = "Heterozygous Included Results")
View(results2)
results3<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
include_hets = TRUE,
parallel = TRUE,
verbose = FALSE,
predict_by_vote = TRUE,
n_votes = 10,
n_perms = 10)
plot_locus_perm_cv(results3$cross_validation_results)
knitr::kable(results3$consensious_predictions[1:15,], align = "c", caption = "Consensious Predictions")
#look at overall and by_class performance
results1$cross_validation_results$Overall_Summary
results1$cross_validation_results$By_Class_Summary
#look at overall and by_class performance
results1$cross_validation_results$Overall_Summary[,1:5]
results1$cross_validation_results$By_Class_Summary[,1:5]
#look at overall and by_class performance
knitr::kable(results1$cross_validation_results$Overall_Summary[,1:5], align = "c", caption = "Subsection of Overall Summary for 'results1' Object")
#look at overall and by_class performance
knitr::kable(results1$cross_validation_results$Overall_Summary[,1:5], align = "c", caption = "Subsection of Overall Summary for 'results1' Object")
knitr::kable(results1$cross_validation_results$By_Class_Summary[,1:5],align = "c", caption = "Subsection of Overall Summary for 'results1' Object")
#look at overall and by_class performance
knitr::kable(results1$cross_validation_results$Overall_Summary[,1:5], align = "c", caption = "Subsection of Overall Summary for 'results1' Object")
knitr::kable(results1$cross_validation_results$By_Class_Summary[,1:5],align = "c", caption = "Subsection of By-Class Summary for 'results1' Object")
library(HaploCatcher)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
#library
suppressWarnings(library(HaploCatcher))
suppressWarnings(library(lattice))
suppressWarnings(library(ggplot2))
#read data from package
data("geno_mat")
data("gene_comp")
data("marker_info")
# Chunk 3
knitr::kable(head(gene_comp), align = "c", caption = "Gene Compendium Input File")
# Chunk 4
knitr::kable(data.frame(Call=unique(gene_comp$Call)), align = "c", caption = "Haplotype Calls")
# Chunk 5
a<-data.frame(FullSampleName=c("Geno_1", "Geno_2", "Geno_3"),
Chromosome=rep("5D", 3),
Gene=rep("pm34", 3),
Call=c("pm34", "het_pm34", "non_pm34"))
knitr::kable(a, align = "c", caption = "Pm34 Example Input File")
# Chunk 6
#must define as a matrix
geno_mat<-as.matrix(geno_mat)
#see head
knitr::kable(geno_mat[1:5, 1:5], align = "c", caption = "Marker Matrix Input File")
# Chunk 7
knitr::kable(head(marker_info), align = "c", caption = "Marker Info Input File")
# Chunk 8
a<-data.frame(Marker=c("TRACE_00102",
"TRACE_13112",
"TRACE_43821"),
Chromosome=c(1, 1, 1),
BP_Position=c(0.0,
0.5,
1.2))
knitr::kable(a, align = "c", caption = "Marker Info Input File Example")
# Chunk 9
url<-"https://raw.githubusercontent.com/zjwinn/HaploCatcher/main/Figure1_For_I_T_HC.png"
knitr::include_graphics(url)
# Chunk 10
#library
library(HaploCatcher)
#read data from package
data("geno_mat")
data("gene_comp")
data("marker_info")
# Chunk 11
#set seed (for reproducablility)
set.seed(022294)
#randomly partition the training data and test from total
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
#nullify the seed we set so we don't mess with cross validation
set.seed(NULL)
#run without heterozygous individuals sequentially
results1<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
set_seed = 022294,
n_perms = 10)
?auto_locus
library(HaploCatcher)
# Chunk 1
#set universal options
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2
#library
suppressWarnings(library(HaploCatcher))
suppressWarnings(library(lattice))
suppressWarnings(library(ggplot2))
suppressWarnings(library(randomForest))
#read data from package
data("geno_mat")
data("gene_comp")
data("marker_info")
# Chunk 3
#display head of gene_comp file
knitr::kable(head(gene_comp),
align = "c",
caption = "Gene Compendium Input File")
# Chunk 4
#display unique calls
knitr::kable(data.frame(Call=unique(gene_comp$Call)),
align = "c",
caption = "Haplotype Calls")
# Chunk 5
#make example data frame
a<-data.frame(FullSampleName=c("Geno_1", "Geno_2", "Geno_3"),
Chromosome=rep("5D", 3),
Gene=rep("pm34", 3),
Call=c("pm34", "het_pm34", "non_pm34"))
#display
knitr::kable(a,
align = "c",
caption = "Pm34 Example Input File")
# Chunk 6
#must define as a matrix
geno_mat<-as.matrix(geno_mat)
#see head
knitr::kable(geno_mat[1:5, 1:5],
align = "c",
caption = "Marker Matrix Input File")
# Chunk 7
#display marker_info
knitr::kable(head(marker_info),
align = "c",
caption = "Marker Info Input File")
# Chunk 8
#make example data set
a<-data.frame(Marker=c("TRACE_00102",
"TRACE_13112",
"TRACE_43821"),
Chromosome=c(1, 1, 1),
BP_Position=c(0.0,
0.5,
1.2))
#display
knitr::kable(a,
align = "c",
caption = "Marker Info Input File Example")
# Chunk 9
#pull figure from internet
url<-"https://raw.githubusercontent.com/zjwinn/HaploCatcher/main/Figure1_For_I_T_HC.png"
knitr::include_graphics(url)
# Chunk 10
#library
library(HaploCatcher)
#read data from package
data("geno_mat")
data("gene_comp")
data("marker_info")
# Chunk 11
#set seed (for reproducible results)
set.seed(022294)
#randomly partition the training data and test from total
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
#nullify the seed we set so we don't mess with cross validation
set.seed(NULL)
#run without heterozygous individuals sequentially
results1<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
set_seed = 022294,
n_perms = 10,
verbose = FALSE)
#run with heterozygous individuals in parallel
results2<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
set_seed = 022294,
include_hets = TRUE,
parallel = TRUE,
n_perms = 10,
verbose = FALSE)
#show results for with and without hets
knitr::kable(results1$predictions[1:15,],
align = "c",
caption = "Heterozygous Excluded Results")
knitr::kable(results2$predictions[1:15,],
align = "c",
caption = "Heterozygous Included Results")
#prediction by voting
results3<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
include_hets = TRUE,
parallel = TRUE,
verbose = FALSE,
predict_by_vote = TRUE,
n_votes = 10,
n_perms = 10,
plot_cv_results = FALSE)
#show predictions
knitr::kable(results3$consensus_predictions[1:15,],
align = "c",
caption = "Consensus Predictions")
#plot out the cross validation results
plot_locus_perm_cv(results3$cross_validation_results)
#look at overall and by_class performance
knitr::kable(results1$cross_validation_results$Overall_Summary[,1:5],
align = "c",
caption = "Subsection of Overall Summary for 'results1' Object")
knitr::kable(results1$cross_validation_results$By_Class_Summary[,1:5],
align = "c",
caption = "Subsection of By-Class Summary for 'results1' Object")
library(HaploCatcher)
?randomForest
help(package = "randomForest")
#use something to make both lattice and random forest needed
#data
data(iris)
# Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE)
#library
suppressWarnings(library(HaploCatcher))
suppressWarnings(library(lattice))
suppressWarnings(library(ggplot2))
suppressWarnings(library(randomForest))
#use something to make both lattice and random forest needed
#data
data(iris)
# Look at the third trees in the forest.
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE)
help(package = "lattice")
?equal.count
library(HaploCatcher)
help(package = "HaploCatcher")
help(package = "HaploCatcher")
library(HaploCatcher)
detach("package:HaploCatcher", unload = TRUE)
install.packages("C:/Users/zwinn/OneDrive/R_Packages/HaploCatcher_1.0.2.tar.gz")
