geno_matrix<-geno_matrix[,base::colnames(geno_matrix) %in% selected_markers$Marker]
#order the markers
geno_matrix<-geno_matrix[base::order(base::rownames(geno_matrix)), ]
#order the fullsamplenames in training
training<-classification[base::order(classification$FullSampleName),]
#cbind
training<-base::cbind(training, geno_matrix)
#check if
if(base::unique(training$FullSampleName %in%  base::rownames(geno_matrix))>1){
base::stop("Error: Individuals in the training parition are not found in the 'geno_mat'!")
}
#make a correlation set
corr<-training[,c("Call", base::colnames(geno_matrix))]
corr$Call<-base::match(corr$Call, unique(corr$Call))
corr[,1:base::ncol(corr)]<-base::lapply(corr[,1:base::ncol(corr)], base::as.numeric)
#perform correlation
corr<-base::suppressWarnings(base::round(stats::cor(corr), 10))
corr<-base::data.frame("|r|"=corr[-1,1],
check.names = FALSE)
corr$`|r|`<-base::abs(corr$`|r|`)
corr$marker<-base::rownames(corr)
corr$BP_Position<-selected_markers$BP_Position
corr$MBP_Position<-base::round(base::as.numeric(corr$BP_Position)/1000000, 2)
#plot results
if(verbose==TRUE){
base::plot(x=corr$MBP_Position,
y=corr$`|r|`,
main = base::paste("Correlational Study of markers on", chromosome, "for", gene_name),
xlab = "Megabasepair (Mbp) Position",
ylab = "Absolute Value of Correlation (|r|)")
}
#plot threshold
corr<-corr[base::order(corr$`|r|`, decreasing = TRUE),]
corr<-corr[1:ncor_markers,]
#plot threshold line
if(verbose==TRUE){
graphics::abline(h=min(corr$`|r|`), col = "red", lty=2)
graphics::legend("bottomleft",legend=base::paste("Top", ncor_markers, "correlated markers thresold"),  col = "red", lty = 2 )
}
#pull markers in training
training<-training[,
c("FullSampleName",
"Call",
corr$marker)]
#format datasets
training[,1:2]<-base::lapply(training[,1:2], base::as.factor)
training[,3:base::ncol(training)]<-base::lapply(training[,3:base::ncol(training)], base::as.numeric)
#show frequency in the testing population
if(verbose==TRUE){
a<-base::data.frame(base::table(training$Call)/ base::nrow(training))
base::colnames(a)=c("Call", "Frequency")
print(knitr::kable(a, caption = "Frequency of Calls in Training", digits = 2))
}
#make sure they are dataframes
training<-base::as.data.frame(training)
#make folds
fold<-caret::createFolds(training[,2], k = 5)
#make train control
cont_train<-caret::trainControl(classProb = TRUE,
verboseIter = FALSE,
savePredictions = TRUE,
index = fold,
number = 5,
repeats = 1000,
method = "repeatedcv")
#send message
if(verbose==TRUE){print("Note: Running Models...")}
#make grid
grid_tune<-base::expand.grid(k = base::seq(from = 1,
to = (base::ncol(training)-2),
by = 2))
#fit model
fit_1<-caret::train(Call ~ .,
data = training[,-1],
method = "knn",
tuneGrid = grid_tune,
trControl = cont_train)
#make grid
grid_tune<-base::expand.grid(mtry = c(1, base::seq(from = 5,
to = (base::ncol(training)-2),
by = 5)))
#fit model
fit_2<-caret::train(Call ~ .,
data = training[,-1],
method = "rf",
tuneGrid = grid_tune,
trControl = cont_train)
#send message
if(verbose==TRUE){base::print("Note: Done!")}
if(verbose==TRUE){base::print("Note: Displaying cross validation tuning results...")}
#summary of models
if(verbose==TRUE){
base::print(fit_1)
base::print(fit_2)
}
#make results object
seed<-base::ifelse(base::is.null(set_seed), "no_seed_set", set_seed)
models<-base::list(knn=fit_1,
rf=fit_2)
data<-training
results<-base::list(seed=seed,
trained_models=models,
data=data)
View(results)
library(HaploMapper)
#### for locus_train ####
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("genecomp")
#run the function with hets
fit1<-locus_cv(set_seed=022294,
geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
include_hets=TRUE, #include hets in the model
include_models=TRUE, #include models in the final results
verbose = TRUE) #allows for text and graph output
devtools::load_all(".")
library(HaploMapper)
#run the function with hets
fit1<-locus_train(seed_set=022294,
geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
include_hets=TRUE, #include hets in the model
include_models=TRUE, #include models in the final results
verbose = TRUE) #allows for text and graph output
library(HaploMapper)
devtools::load_all(".")
#### for locus_train ####
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("genecomp")
#run the function with hets
fit1<-locus_train(seed_set=022294,
geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
include_hets=TRUE, #include hets in the model
include_models=TRUE, #include models in the final results
verbose = TRUE) #allows for text and graph output
#run the function with hets
fit1<-locus_train(seed_set=022294,
geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
include_hets=TRUE, #include hets in the model
verbose = TRUE) #allows for text and graph output
#run the function with hets
fit1<-locus_train(set_seed=022294,
geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
include_hets=TRUE, #include hets in the model
verbose = TRUE) #allows for text and graph output
library(HaploMapper)
#### for locus_train ####
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("genecomp")
#run the function with hets
fit1<-locus_train(geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
include_hets=TRUE, #include hets in the model
verbose = TRUE, #allows for text and graph output
set_seed=022294, #sets a seed for reproduction of results
models="all") #sets what models are requested
View(fit_1)
#set seed
base::set.seed(set_seed)
#check if
if(!gene_name %in% gene_file$Gene){
stop("Error:'gene_name' not found in 'geno_file'!")
}
#make dataset
classification<-gene_file[gene_file$Gene==gene_name,]
#check if
if(length(classification$FullSampleName[base::duplicated(classification$FullSampleName)])>0){
base::stop("Error: There are duplicated individuals in the 'gene_file'!")
}else if(base::class(base::try(base::ncol(gene_file[,c("Gene", "FullSampleName", "Call")])))=="try-error"){
base::stop("Error: The 'gene_file' does not have the columns 'Gene', 'FullSampleName', and 'Call'!")
}
#check if
if(include_hets==FALSE){
if(verbose==TRUE){base::message("Note: Removing heterozygous calls from the dataframe")}
classification<-classification[!classification$Call %in% classification$Call[grep("het_", classification$Call)], ]
}else if(!is.logical(include_hets)){
base::stop("Error: Argument 'include_hets' must be a logical argument! (TRUE or FALSE)")
}else{
if(verbose==TRUE){base::message("Note: User has requested heterozygous calls remain in the dataset")}
}
#pull genetic information for individuals
geno_matrix<-geno_mat[base::rownames(geno_mat) %in% classification$FullSampleName,]
#check if
if(base::class(base::try(base::ncol(marker_info[,c("Marker", "Chromosome", "BP_Position")])))=="try-error"){
base::stop("Error: columns are misnamed or missing in the 'marker_info'!")
}else if(!chromosome %in% marker_info$Chromosome){
base::stop("Error: 'chromosome' is not defined in the 'marker_info' chromosome column!")
}
#check if
if(!models_request %in% c("knn","rf","all")){
base::stop("Error: 'models_request' is incorrect, use either 'knn', 'rf', or 'all'!")
}
#subset markers
selected_markers<-marker_info[marker_info$Chromosome==chromosome,]
#pull markers
geno_matrix<-geno_matrix[,base::colnames(geno_matrix) %in% selected_markers$Marker]
models_request="all"
#check if
if(!models_request %in% c("knn","rf","all")){
base::stop("Error: 'models_request' is incorrect, use either 'knn', 'rf', or 'all'!")
}
#subset markers
selected_markers<-marker_info[marker_info$Chromosome==chromosome,]
#pull markers
geno_matrix<-geno_matrix[,base::colnames(geno_matrix) %in% selected_markers$Marker]
#order the markers
geno_matrix<-geno_matrix[base::order(base::rownames(geno_matrix)), ]
#order the fullsamplenames in training
training<-classification[base::order(classification$FullSampleName),]
#cbind
training<-base::cbind(training, geno_matrix)
#check if
if(base::unique(training$FullSampleName %in%  base::rownames(geno_matrix))>1){
base::stop("Error: Individuals in the training parition are not found in the 'geno_mat'!")
}
#make a correlation set
corr<-training[,c("Call", base::colnames(geno_matrix))]
corr$Call<-base::match(corr$Call, unique(corr$Call))
corr[,1:base::ncol(corr)]<-base::lapply(corr[,1:base::ncol(corr)], base::as.numeric)
#perform correlation
corr<-base::suppressWarnings(base::round(stats::cor(corr), 10))
corr<-base::data.frame("|r|"=corr[-1,1],
check.names = FALSE)
corr$`|r|`<-base::abs(corr$`|r|`)
corr$marker<-base::rownames(corr)
corr$BP_Position<-selected_markers$BP_Position
corr$MBP_Position<-base::round(base::as.numeric(corr$BP_Position)/1000000, 2)
#plot results
if(verbose==TRUE){
base::plot(x=corr$MBP_Position,
y=corr$`|r|`,
main = base::paste("Correlational Study of markers on", chromosome, "for", gene_name),
xlab = "Megabasepair (Mbp) Position",
ylab = "Absolute Value of Correlation (|r|)")
}
#plot threshold
corr<-corr[base::order(corr$`|r|`, decreasing = TRUE),]
corr<-corr[1:ncor_markers,]
#plot threshold line
if(verbose==TRUE){
graphics::abline(h=min(corr$`|r|`), col = "red", lty=2)
graphics::legend("bottomleft",legend=base::paste("Top", ncor_markers, "correlated markers thresold"),  col = "red", lty = 2 )
}
#pull markers in training
training<-training[,
c("FullSampleName",
"Call",
corr$marker)]
#format datasets
training[,1:2]<-base::lapply(training[,1:2], base::as.factor)
training[,3:base::ncol(training)]<-base::lapply(training[,3:base::ncol(training)], base::as.numeric)
#show frequency in the testing population
if(verbose==TRUE){
a<-base::data.frame(base::table(training$Call)/ base::nrow(training))
base::colnames(a)=c("Call", "Frequency")
print(knitr::kable(a, caption = "Frequency of Calls in Training", digits = 2))
}
#make sure they are dataframes
training<-base::as.data.frame(training)
#make folds
fold<-caret::createFolds(training[,2], k = 5)
#make train control
cont_train<-caret::trainControl(classProb = TRUE,
verboseIter = FALSE,
savePredictions = TRUE,
index = fold,
number = 5,
repeats = 1000,
method = "repeatedcv")
#send message
if(verbose==TRUE){print("Note: Running Models...")}
#make grid
grid_tune<-base::expand.grid(k = base::seq(from = 1,
to = (base::ncol(training)-2),
by = 2))
#fit model
if(models_request=="all" | models_request=="knn"){
fit_1<-caret::train(Call ~ .,
data = training[,-1],
method = "knn",
tuneGrid = grid_tune,
trControl = cont_train)
}
#make grid
grid_tune<-base::expand.grid(mtry = c(1, base::seq(from = 5,
to = (base::ncol(training)-2),
by = 5)))
#fit model
if(models_request=="all" | models_request=="rf"){
fit_2<-caret::train(Call ~ .,
data = training[,-1],
method = "rf",
tuneGrid = grid_tune,
trControl = cont_train)
}
#send message
if(verbose==TRUE){base::print("Note: Done!")}
if(verbose==TRUE){base::print("Note: Displaying cross validation tuning results...")}
#summary of models
if(verbose==TRUE){
base::print(fit_1)
base::print(fit_2)
}
#make results object
seed<-base::ifelse(base::is.null(set_seed), "no_seed_set", set_seed)
if(models_request=="all"){
models<-base::list(knn=fit_1,
rf=fit_2)
}else if(models_request=="knn"){
models<-fit_1
}else if(models_request=="rf"){
models<-fit_2
}
data<-training
results<-base::list(seed=seed,
trained_models=models,
data=data)
#retrun the results
return(results)
library(HaploMapper)
devtools::load_all(".")
#### for locus_train ####
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("genecomp")
#run the function with hets
fit1<-locus_train(geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
include_hets=TRUE, #include hets in the model
verbose = TRUE, #allows for text and graph output
set_seed=022294, #sets a seed for reproduction of results
models="all") #sets what models are requested
View(fit1)
is.numeric(fit1$seed)
use_r("locus_pred")
?locus_train
#### for locus_train ####
#set seed for reproducable sampling
set.seed(022294)
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("genecomp")
genecomp$FullSampleName
?sample
sample(genecomp$FullSampleName, round(length("FullSampleName")*0.8),0)
genecomp$FullSampleName %in% sample(genecomp$FullSampleName, round(length(genecomp$FullSampleName)*0.8),0)
#sample data in the genecomp file to make a traning population
train<-genecomp[genecomp$FullSampleName %in% sample(genecomp$FullSampleName, round(length(genecomp$FullSampleName)*0.8),0),]
#sample data, not in the train, for forward prediction
test<-genecomp[genecomp$FullSampleName %in% train$FullSampleName,]
#sample data, not in the train, for forward prediction
test<-genecomp[!genecomp$FullSampleName %in% train$FullSampleName,]
#sample data, not in the train, for forward prediction
test<-genecomp[!genecomp$FullSampleName %in% train$FullSampleName,"FullSampleName"]
#sample data in the genecomp file to make a traning population
train<-genecomp[genecomp$FullSampleName %in% sample(genecomp$FullSampleName, round(length(genecomp$FullSampleName)*0.8),0),]
#pull vector of names, not in the train, for forward prediction
test<-genecomp[!genecomp$FullSampleName %in% train$FullSampleName,"FullSampleName"]
#run the function with hets
fit1<-locus_train(geno_mat=geno_mat, #the genotypic matrix
gene_file=genecomp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
include_hets=TRUE, #include hets in the model
verbose = TRUE, #allows for text and graph output
set_seed=022294, #sets a seed for reproduction of results
models="all") #sets what models are requested
#run the function with hets
fit1<-locus_train(geno_mat=geno_mat, #the genotypic matrix
gene_file=train, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
include_hets=TRUE, #include hets in the model
verbose = TRUE, #allows for text and graph output
set_seed=022294, #sets a seed for reproduction of results
models="all") #sets what models are requested
geno_train_results=fit1
geno_mat=geno_mat
genotypes_to_predict=test
a<-geno_train_results
b<-geno_mat
c<-genotypes_to_predict
knn<-a$trained_models$knn
rf<-a$trained_models$rf
library(HaploMapper)
devtools::load_all(".")
#### for locus_train ####
#set seed for reproducible sampling
set.seed(022294)
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("genecomp")
#sample data in the genecomp file to make a traning population
train<-genecomp[genecomp$FullSampleName %in% sample(genecomp$FullSampleName, round(length(genecomp$FullSampleName)*0.8),0),]
#pull vector of names, not in the train, for forward prediction
test<-genecomp[!genecomp$FullSampleName %in% train$FullSampleName,"FullSampleName"]
#run the function with hets
fit1<-locus_train(geno_mat=geno_mat, #the genotypic matrix
gene_file=train, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
include_hets=TRUE, #include hets in the model
verbose = TRUE, #allows for text and graph output
set_seed=022294, #sets a seed for reproduction of results
models="all") #sets what models are requested
#predict the lines in the test population
pred<-locus_pred(geno_train_results=fit1,
geno_mat=geno_mat,
genotypes_to_predict=test)
geno_train_results=fit1
geno_mat=geno_mat
genotypes_to_predict=test
a<-geno_train_results
b<-geno_mat
c<-genotypes_to_predict
library(HaploMapper)
#### for locus_train ####
#set seed for reproducible sampling
set.seed(022294)
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("genecomp")
#sample data in the genecomp file to make a traning population
train<-genecomp[genecomp$FullSampleName %in% sample(genecomp$FullSampleName, round(length(genecomp$FullSampleName)*0.8),0),]
#pull vector of names, not in the train, for forward prediction
test<-genecomp[!genecomp$FullSampleName %in% train$FullSampleName,"FullSampleName"]
#run the function with hets
fit1<-locus_train(geno_mat=geno_mat, #the genotypic matrix
gene_file=train, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
include_hets=TRUE, #include hets in the model
verbose = TRUE, #allows for text and graph output
set_seed=022294, #sets a seed for reproduction of results
models="all") #sets what models are requested
#predict the lines in the test population
pred<-locus_pred(geno_train_results=fit1,
geno_mat=geno_mat,
genotypes_to_predict=test)
devtools::load_all(".")
#predict the lines in the test population
pred<-locus_pred(geno_train_results=fit1,
geno_mat=geno_mat,
genotypes_to_predict=test)
?locus_pred
?locus_cv
library(HaploMapper)
?locus_cv
?locus_perm_cv
