caption = "Gene Compendium Input File")
# Chunk 4
#display unique calls
knitr::kable(data.frame(Call=unique(gene_comp$Call)),
align = "c",
caption = "Haplotype Calls")
# Chunk 5
#make example data frame
a<-data.frame(FullSampleName=c("Geno_1", "Geno_2", "Geno_3"),
Chromosome=rep("5D", 3),
Gene=rep("pm34", 3),
Call=c("pm34", "het_pm34", "non_pm34"))
#display
knitr::kable(a,
align = "c",
caption = "Pm34 Example Input File")
# Chunk 6
#must define as a matrix
geno_mat<-as.matrix(geno_mat)
#manipulate a little to demonstrate
geno_mat[1,1]=1
geno_mat[5,5]=2
#see head
knitr::kable(geno_mat[1:5, 1:5],
align = "c",
caption = "Marker Matrix Input File")
# Chunk 7
#display marker_info
knitr::kable(head(marker_info),
align = "c",
caption = "Marker Info Input File")
# Chunk 8
#make example data set
a<-data.frame(Marker=c("TRACE_00102",
"TRACE_13112",
"TRACE_43821"),
Chromosome=c(1,
1,
1),
BP_Position=c(0.0,
0.5,
1.2))
#display
knitr::kable(a,
align = "c",
caption = "Marker Info Input File Example")
# Chunk 9
#pull figure from internet
url<-"https://raw.githubusercontent.com/zjwinn/HaploCatcher/main/Figure.png"
knitr::include_graphics(url)
# Chunk 10
#library
library(HaploCatcher)
#read data from package
data("geno_mat")
data("gene_comp")
data("marker_info")
# Chunk 11
#set seed (for reproducible results)
set.seed(022294)
#randomly partition the training data and test from total
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
#nullify the seed we set so we don't mess with cross validation
set.seed(NULL)
#run without heterozygous individuals sequentially
results1<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
set_seed = 022294,
n_perms = 10,
verbose = TRUE)
warnings()
ncor_markers=50
n_neighbors=50
percent_testing=0.2
percent_training=0.8
include_hets=FALSE
include_models=FALSE
verbose=TRUE
graph=FALSE
data("geno_mat")
data("marker_info")
data("gene_comp")
geno_mat = geno_mat
gene_file = gene_comp
gene_name = unique(gene_comp$Gene)
marker_info = marker_info
chromosome = "3B"
#check if
if(!gene_name %in% gene_file$Gene){
stop("'gene_name' not found in 'geno_file'!")
}
#make dataset
classification<-gene_file[gene_file$Gene==gene_name,]
#check if
if(length(classification$FullSampleName[base::duplicated(classification$FullSampleName)])>0){
base::stop("There are duplicated individuals in the 'gene_file' or there are missing FullSampleNames in the 'gene_file'!")
}else if(base::class(base::try(base::ncol(gene_file[,c("Gene", "FullSampleName", "Call")])))=="try-error"){
base::stop("The 'gene_file' does not have the columns 'Gene', 'FullSampleName', and 'Call'!")
}
#check if
if(include_hets==TRUE){
if(length(unique(classification$Call))<=2){
stop("You specified 'include_hets=TRUE' yet there appears to only be two catigorizations for your call... is your data formatted properly?")
}else if(length(unique(classification$Call))>3){
stop("There appears to be more than 3 catigories in your gene_file... only biallelic loci are supported at this time! Please properly format your file!")
}
}else if(include_hets==FALSE){
if(length(unique(classification$Call))>3){
stop("There appears to be more than 3 catigories in your gene_file... only biallelic loci are supported at this time! Please properly format your file!")
}
}
#check if
if(include_hets==FALSE){
if(verbose==TRUE){base::print("Note: Removing heterozygous calls from the dataframe")}
classification<-classification[!classification$Call %in% classification$Call[grep("het_", classification$Call)], ]
}else if(!is.logical(include_hets)){
base::stop("Argument 'include_hets' must be a logical argument! (TRUE or FALSE)")
}else{
if(verbose==TRUE){base::print("Note: User has requested heterozygous calls remain in the dataset")}
}
#check if
if(percent_training>1 | percent_training<0 | !base::is.numeric(percent_training)){
base::stop("'percent_training' is a non-integer, numeric variable bound between 0 and 1!")
}
#define the training
training<-classification[base::sample(1:nrow(classification), size = percent_training*nrow(classification)),]
#check if
if(percent_testing>1 | percent_testing<0 | !base::is.numeric(percent_testing)){
base::stop("'percent_testing' is a non-integer, numeric variable bound between 0 and 1!")
}else if(percent_training+percent_testing>1){
base::stop("'percent_testing'+'percent_training' cannot be greater than 1!")
}
#define the test
test<-classification[!classification$FullSampleName %in% training$FullSampleName,]
#check if
if(base::unique(base::duplicated(rownames(geno_mat)))>1){
base::stop("There are duplicated individuals in the 'geno_mat'!")
}else if(!base::is.numeric(geno_mat)){
base::stop("The 'geno_mat' contains non-numeric markers!")
}
#pull genetic information for individuals
geno_matrix<-geno_mat[base::rownames(geno_mat) %in% classification$FullSampleName,]
#check if
if(base::class(base::try(base::ncol(marker_info[,c("Marker", "Chromosome", "BP_Position")])))=="try-error"){
base::stop("columns are misnamed or missing in the 'marker_info'!")
}else if(!chromosome %in% marker_info$Chromosome){
base::stop("'chromosome' is not defined in the 'marker_info' chromosome column!")
}
#subset markers
selected_markers<-marker_info[marker_info$Chromosome==chromosome,]
#pull markers
geno_matrix<-geno_matrix[,base::colnames(geno_matrix) %in% selected_markers$Marker]
#check if
if(base::length(base::unique(training$FullSampleName %in%  base::rownames(geno_matrix)))>1){
base::stop("Individuals in the training parition are not found in the 'geno_mat'!")
}
#pull training individuals
geno_sub_training<-geno_matrix[base::rownames(geno_matrix) %in% training$FullSampleName,]
#order the markers
geno_sub_training<-geno_sub_training[base::order(base::rownames(geno_sub_training)), ]
#order the fullsamplenames in training
training<-training[base::order(training$FullSampleName),]
#cbind
training<-base::cbind(training, geno_sub_training)
#make a correlation set
corr<-training[,c("Call", base::colnames(geno_sub_training))]
corr$Call<-base::match(corr$Call, unique(corr$Call))
corr[,1:base::ncol(corr)]<-base::lapply(corr[,1:base::ncol(corr)], base::as.numeric)
#perform correlation
corr<-base::suppressWarnings(stats::cor(corr))
corr<-base::round(corr, 10)
corr<-base::data.frame("|r|"=corr[-1,1],
check.names = FALSE)
corr$`|r|`<-base::abs(corr$`|r|`)
corr$marker<-base::rownames(corr)
corr$BP_Position<-selected_markers$BP_Position
corr$MBP_Position<-base::round(base::as.numeric(corr$BP_Position)/1000000, 2)
#plot results
if(graph==TRUE){
base::plot(x=corr$MBP_Position,
y=corr$`|r|`,
main = base::paste("Correlational Study of markers on", chromosome, "for", gene_name),
xlab = "Megabasepair (Mbp) Position",
ylab = "Absolute Value of Correlation (|r|)")
}
#plot threshold
corr<-corr[base::order(corr$`|r|`, decreasing = TRUE),]
corr<-corr[1:ncor_markers,]
#plot threshold line
if(graph==TRUE){
graphics::abline(h=min(corr$`|r|`), col = "red", lty=2)
graphics::legend("bottomleft",legend=base::paste("Top", ncor_markers, "correlated markers thresold"),  col = "red", lty = 2 )
}
#pull markers in training
training<-training[,
c("FullSampleName",
"Call",
corr$marker)]
#subset markers and bind them to testing set
geno_sub_testing<-geno_matrix[base::rownames(geno_matrix) %in% test$FullSampleName,
base::colnames(geno_matrix) %in% corr$marker]
geno_sub_testing<-geno_sub_testing[base::order(rownames(geno_sub_testing)),]
test<-test[base::order(test$FullSampleName),]
#cbind
test<-base::cbind(test,geno_sub_testing)
#select
test<-test[,
c("FullSampleName",
"Call",
corr$marker)]
#format datasets
training[,1:2]<-base::lapply(training[,1:2], base::as.factor)
test[,1:2]<-base::lapply(test[,1:2], as.factor)
training[,3:base::ncol(training)]<-base::lapply(training[,3:base::ncol(training)], base::as.numeric)
test[,3:base::ncol(test)]<-base::lapply(test[,3:base::ncol(test)], base::as.numeric)
#show frequency in the testing population
if(verbose==TRUE){
a<-base::data.frame(base::table(training$Call)/ base::nrow(training))
base::colnames(a)=c("Call", "Frequency")
print(knitr::kable(a, caption = "Frequency of Calls in Training", digits = 2))
a<-base::data.frame(base::table(test$Call)/ base::nrow(test))
base::colnames(a)=c("Call", "Frequency")
print(knitr::kable(a, caption = "Frequency of Calls in Test", digits = 2))
}
#make sure they are dataframes
training<-base::as.data.frame(training)
test<-base::as.data.frame(test)
#make folds
fold<-caret::createFolds(training[,2], k = 5)
#make train control
cont_train<-caret::trainControl(classProb = TRUE,
verboseIter = FALSE,
savePredictions = TRUE,
index = fold,
number = 5,
repeats = 1000,
method = "repeatedcv")
#send message
if(verbose==TRUE){print("Note: Running Models...")}
if(n_neighbors<=2){
#make alternate grid
grid_tune<-base::expand.grid(k = 1)
}else{
#make grid
grid_tune<-base::expand.grid(k = base::seq(from = 1,
to = n_neighbors,
by = 2))
}
#fit model
fit_1<-caret::train(Call ~ .,
data = training[,-1],
method = "knn",
tuneGrid = grid_tune,
trControl = cont_train)
#check number of markers
if(ncor_markers<5){
#make grid
grid_tune<-base::expand.grid(mtry=1)
}else{
#make grid
grid_tune<-base::expand.grid(mtry = base::seq(from = 1,
to = (base::ncol(train)-2),
by = 5))
}
grid_tune
#fit model
fit_2<-caret::train(Call ~ .,
data = training[,-1],
method = "rf",
tuneGrid = grid_tune,
trControl = cont_train)
ncor_markers=50
#check if
if(!gene_name %in% gene_file$Gene){
stop("'gene_name' not found in 'geno_file'!")
}
#make dataset
classification<-gene_file[gene_file$Gene==gene_name,]
#check if
if(length(classification$FullSampleName[base::duplicated(classification$FullSampleName)])>0){
base::stop("There are duplicated individuals in the 'gene_file' or there are missing FullSampleNames in the 'gene_file'!")
}else if(base::class(base::try(base::ncol(gene_file[,c("Gene", "FullSampleName", "Call")])))=="try-error"){
base::stop("The 'gene_file' does not have the columns 'Gene', 'FullSampleName', and 'Call'!")
}
#check if
if(include_hets==TRUE){
if(length(unique(classification$Call))<=2){
stop("You specified 'include_hets=TRUE' yet there appears to only be two catigorizations for your call... is your data formatted properly?")
}else if(length(unique(classification$Call))>3){
stop("There appears to be more than 3 catigories in your gene_file... only biallelic loci are supported at this time! Please properly format your file!")
}
}else if(include_hets==FALSE){
if(length(unique(classification$Call))>3){
stop("There appears to be more than 3 catigories in your gene_file... only biallelic loci are supported at this time! Please properly format your file!")
}
}
#check if
if(include_hets==FALSE){
if(verbose==TRUE){base::print("Note: Removing heterozygous calls from the dataframe")}
classification<-classification[!classification$Call %in% classification$Call[grep("het_", classification$Call)], ]
}else if(!is.logical(include_hets)){
base::stop("Argument 'include_hets' must be a logical argument! (TRUE or FALSE)")
}else{
if(verbose==TRUE){base::print("Note: User has requested heterozygous calls remain in the dataset")}
}
#check if
if(percent_training>1 | percent_training<0 | !base::is.numeric(percent_training)){
base::stop("'percent_training' is a non-integer, numeric variable bound between 0 and 1!")
}
#define the training
training<-classification[base::sample(1:nrow(classification), size = percent_training*nrow(classification)),]
#check if
if(percent_testing>1 | percent_testing<0 | !base::is.numeric(percent_testing)){
base::stop("'percent_testing' is a non-integer, numeric variable bound between 0 and 1!")
}else if(percent_training+percent_testing>1){
base::stop("'percent_testing'+'percent_training' cannot be greater than 1!")
}
#define the test
test<-classification[!classification$FullSampleName %in% training$FullSampleName,]
#check if
if(base::unique(base::duplicated(rownames(geno_mat)))>1){
base::stop("There are duplicated individuals in the 'geno_mat'!")
}else if(!base::is.numeric(geno_mat)){
base::stop("The 'geno_mat' contains non-numeric markers!")
}
#pull genetic information for individuals
geno_matrix<-geno_mat[base::rownames(geno_mat) %in% classification$FullSampleName,]
#check if
if(base::class(base::try(base::ncol(marker_info[,c("Marker", "Chromosome", "BP_Position")])))=="try-error"){
base::stop("columns are misnamed or missing in the 'marker_info'!")
}else if(!chromosome %in% marker_info$Chromosome){
base::stop("'chromosome' is not defined in the 'marker_info' chromosome column!")
}
#subset markers
selected_markers<-marker_info[marker_info$Chromosome==chromosome,]
#pull markers
geno_matrix<-geno_matrix[,base::colnames(geno_matrix) %in% selected_markers$Marker]
#check if
if(base::length(base::unique(training$FullSampleName %in%  base::rownames(geno_matrix)))>1){
base::stop("Individuals in the training parition are not found in the 'geno_mat'!")
}
#pull training individuals
geno_sub_training<-geno_matrix[base::rownames(geno_matrix) %in% training$FullSampleName,]
#order the markers
geno_sub_training<-geno_sub_training[base::order(base::rownames(geno_sub_training)), ]
#order the fullsamplenames in training
training<-training[base::order(training$FullSampleName),]
#cbind
training<-base::cbind(training, geno_sub_training)
#make a correlation set
corr<-training[,c("Call", base::colnames(geno_sub_training))]
corr$Call<-base::match(corr$Call, unique(corr$Call))
corr[,1:base::ncol(corr)]<-base::lapply(corr[,1:base::ncol(corr)], base::as.numeric)
#perform correlation
corr<-base::suppressWarnings(stats::cor(corr))
corr<-base::round(corr, 10)
corr<-base::data.frame("|r|"=corr[-1,1],
check.names = FALSE)
corr$`|r|`<-base::abs(corr$`|r|`)
corr$marker<-base::rownames(corr)
corr$BP_Position<-selected_markers$BP_Position
corr$MBP_Position<-base::round(base::as.numeric(corr$BP_Position)/1000000, 2)
#plot results
if(graph==TRUE){
base::plot(x=corr$MBP_Position,
y=corr$`|r|`,
main = base::paste("Correlational Study of markers on", chromosome, "for", gene_name),
xlab = "Megabasepair (Mbp) Position",
ylab = "Absolute Value of Correlation (|r|)")
}
#plot threshold
corr<-corr[base::order(corr$`|r|`, decreasing = TRUE),]
corr<-corr[1:ncor_markers,]
#plot threshold line
if(graph==TRUE){
graphics::abline(h=min(corr$`|r|`), col = "red", lty=2)
graphics::legend("bottomleft",legend=base::paste("Top", ncor_markers, "correlated markers thresold"),  col = "red", lty = 2 )
}
#pull markers in training
training<-training[,
c("FullSampleName",
"Call",
corr$marker)]
#subset markers and bind them to testing set
geno_sub_testing<-geno_matrix[base::rownames(geno_matrix) %in% test$FullSampleName,
base::colnames(geno_matrix) %in% corr$marker]
geno_sub_testing<-geno_sub_testing[base::order(rownames(geno_sub_testing)),]
test<-test[base::order(test$FullSampleName),]
#cbind
test<-base::cbind(test,geno_sub_testing)
#select
test<-test[,
c("FullSampleName",
"Call",
corr$marker)]
#format datasets
training[,1:2]<-base::lapply(training[,1:2], base::as.factor)
test[,1:2]<-base::lapply(test[,1:2], as.factor)
training[,3:base::ncol(training)]<-base::lapply(training[,3:base::ncol(training)], base::as.numeric)
test[,3:base::ncol(test)]<-base::lapply(test[,3:base::ncol(test)], base::as.numeric)
#show frequency in the testing population
if(verbose==TRUE){
a<-base::data.frame(base::table(training$Call)/ base::nrow(training))
base::colnames(a)=c("Call", "Frequency")
print(knitr::kable(a, caption = "Frequency of Calls in Training", digits = 2))
a<-base::data.frame(base::table(test$Call)/ base::nrow(test))
base::colnames(a)=c("Call", "Frequency")
print(knitr::kable(a, caption = "Frequency of Calls in Test", digits = 2))
}
#make sure they are dataframes
training<-base::as.data.frame(training)
test<-base::as.data.frame(test)
#make folds
fold<-caret::createFolds(training[,2], k = 5)
#make train control
cont_train<-caret::trainControl(classProb = TRUE,
verboseIter = FALSE,
savePredictions = TRUE,
index = fold,
number = 5,
repeats = 1000,
method = "repeatedcv")
#send message
if(verbose==TRUE){print("Note: Running Models...")}
if(n_neighbors<=2){
#make alternate grid
grid_tune<-base::expand.grid(k = 1)
}else{
#make grid
grid_tune<-base::expand.grid(k = base::seq(from = 1,
to = n_neighbors,
by = 2))
}
#fit model
fit_1<-caret::train(Call ~ .,
data = training[,-1],
method = "knn",
tuneGrid = grid_tune,
trControl = cont_train)
#check number of markers
if(ncor_markers<5){
#make grid
grid_tune<-base::expand.grid(mtry=1)
}else{
#make grid
grid_tune<-base::expand.grid(mtry = base::seq(from = 1,
to = (base::ncol(train)-2),
by = 5))
}
#fit model
fit_2<-caret::train(Call ~ .,
data = training[,-1],
method = "rf",
tuneGrid = grid_tune,
trControl = cont_train)
grid_tune
ncor_markers
ncor_markers<5
base::seq(from = 1,
to = (base::ncol(train)-2),
by = 5)
(base::ncol(train)-2
(base::ncol(train)-2)
(base::ncol(train)-2)
))
(base::ncol(train)-2)
base::ncol(train)
#check number of markers
if(ncor_markers<5){
#make grid
grid_tune<-base::expand.grid(mtry=1)
}else{
#make grid
grid_tune<-base::expand.grid(mtry = base::seq(from = 1,
to = (base::ncol(training)-2),
by = 5))
}
grid_tune
ncol(training)-2
base::seq(from = 1,
to = (base::ncol(training)-2),
by = 5)
#make grid
grid_tune<-base::expand.grid(mtry = c(1,
base::seq(from = 0,
to = (base::ncol(training)-2),
by = 5)[2:length(base::seq(from = 0,
to = (base::ncol(training)-2),
by = 5))]))
grid_tune
#check number of markers
if(ncor_markers<5){
#make grid
grid_tune<-base::expand.grid(mtry=1)
}else{
#make grid
grid_tune<-base::expand.grid(mtry = c(1,
base::seq(from = 0,
to = (base::ncol(training)-2),
by = 5)[2:length(base::seq(from = 0,
to = (base::ncol(training)-2),
by = 5))]))
}
View(grid_tune)
library(HaploCatcher)
library(HaploCatcher)
