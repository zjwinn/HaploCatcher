rm(list=ls(name=env), pos=env)
a<-data.frame(FullSampleName=results[[1]]$FullSampleName)
for(i in 1:n_votes){
a[,paste("Vote_",i,sep = "")]=results[[i]][,2]
}
b<-c()
for(i in 1:nrow(a)){
c<-as.data.frame(table(t(a[i,2:ncol(a)])))
d<-c
e<-levels(a[,2])
e<-data.frame(Var1=e)
d<-merge(d,e, all=T)
d$Freq=ifelse(is.na(d$Freq), 0,d$Freq)
d<-t(d)
colnames(d)=d[1,]
d<-d[-1,]
d<-as.data.frame(t(d))
rownames(d)=NULL
c<-data.frame(FullSampleName=a[i,1],
Consensious_Call=ifelse(length(c[c$Freq==max(c$Freq), "Var1"])>1, "No_Call", c[c$Freq==max(c$Freq), "Var1"]),
d)
b<-rbind(b,c)
remove(c,d,e)
}
#make results object
return_results<-list(method="multiple models - majority rule",
cross_validation_results=fit_cv,
predictions=a,
consensious_predictions=b)
return(return_results)
}else if(parallel==FALSE){
results<-list()
for(i in 1:n_votes){
#train model
fit<-HaploCatcher::locus_train(geno_mat = train_geno_mat, #the genotypic matrix
gene_file = train_gene_file, #the gene compendium file
gene_name = gene_name, #the name of the gene
marker_info = marker_info, #the marker information file
chromosome = chromosome, #name of the chromosome
ncor_markers = ncor_markers, #number of markers to retain
include_hets = include_hets, #include hets in the model
verbose = verbose, #allows for text and graph output
set_seed = set_seed, #sets a seed for reproduction of results
models_request = model_selected) #sets what models are requested
#make a prediction
pred<-HaploCatcher::locus_pred(locus_train_results=fit,
geno_mat=geno_mat,
genotypes_to_predict=testing_genotypes)
results[[i]]<-pred
}
a<-data.frame(FullSampleName=results[[1]]$FullSampleName)
for(i in 1:n_votes){
a[,paste("Vote_",i,sep = "")]=results[[i]][,2]
}
b<-c()
for(i in 1:nrow(a)){
c<-as.data.frame(table(t(a[i,2:ncol(a)])))
d<-c
e<-levels(a[,2])
e<-data.frame(Var1=e)
d<-merge(d,e, all=T)
d$Freq=ifelse(is.na(d$Freq), 0,d$Freq)
d<-t(d)
colnames(d)=d[1,]
d<-d[-1,]
d<-as.data.frame(t(d))
rownames(d)=NULL
c<-data.frame(FullSampleName=a[i,1],
Consensious_Call=ifelse(length(c[c$Freq==max(c$Freq), "Var1"])>1, "No_Call", c[c$Freq==max(c$Freq), "Var1"]),
d)
b<-rbind(b,c)
remove(c,d,e)
}
#make results object
return_results<-list(method="multiple models - majority rule",
cross_validation_results=fit_cv,
predictions=a,
consensious_predictions=b)
return(return_results)
}
}else if(predict_by_vote==FALSE){
#train model
fit<-HaploCatcher::locus_train(geno_mat = train_geno_mat, #the genotypic matrix
gene_file = train_gene_file, #the gene compendium file
gene_name = gene_name, #the name of the gene
marker_info = marker_info, #the marker information file
chromosome = chromosome, #name of the chromosome
ncor_markers = ncor_markers, #number of markers to retain
include_hets = include_hets, #include hets in the model
verbose = verbose, #allows for text and graph output
set_seed = set_seed, #sets a seed for reproduction of results
models_request = model_selected) #sets what models are requested
#make a prediction
pred<-HaploCatcher::locus_pred(locus_train_results=fit,
geno_mat=geno_mat,
genotypes_to_predict=testing_genotypes)
return_results<-list(method="single model - single prediction",
cross_validation_results=a,
prediction_model=fit,
predictions=pred)
return(return_results)
}else{
stop("The function parameter 'predict_by_vote' must be a logical argument (TRUE/FALSE)!")
}
a<-data.frame(FullSampleName=results[[1]]$FullSampleName)
for(i in 1:n_votes){
a[,paste("Vote_",i,sep = "")]=results[[i]][,2]
}
b<-c()
for(i in 1:nrow(a)){
c<-as.data.frame(table(t(a[i,2:ncol(a)])))
d<-c
e<-levels(a[,2])
e<-data.frame(Var1=e)
d<-merge(d,e, all=T)
d$Freq=ifelse(is.na(d$Freq), 0,d$Freq)
d<-t(d)
colnames(d)=d[1,]
d<-d[-1,]
d<-as.data.frame(t(d))
rownames(d)=NULL
c<-data.frame(FullSampleName=a[i,1],
Consensious_Call=ifelse(length(c[c$Freq==max(c$Freq), "Var1"])>1, "No_Call", c[c$Freq==max(c$Freq), "Var1"]),
d)
b<-rbind(b,c)
remove(c,d,e)
}
View(b)
c<-as.data.frame(table(t(a[i,2:ncol(a)])))
d<-c
e<-levels(a[,2])
e<-data.frame(Var1=e)
d<-merge(d,e, all=T)
d$Freq=ifelse(is.na(d$Freq), 0,d$Freq)
d<-t(d)
colnames(d)=d[1,]
d<-d[-1,]
d<-as.data.frame(t(d))
rownames(d)=NULL
Consensious_Call=ifelse(length(c[c$Freq==max(c$Freq), "Var1"])>1, "No_Call", c[c$Freq==max(c$Freq), "Var1"])
length(c[c$Freq==max(c$Freq), "Var1"])
length(c[c$Freq==max(c$Freq), "Var1"])>1
c[c$Freq==max(c$Freq), "Var1"]
as.factor(c[c$Freq==max(c$Freq), "Var1"]))
as.factor(c[c$Freq==max(c$Freq), "Var1"])
c<-as.data.frame(table(t(a[i,2:ncol(a)])))
d<-c
e<-levels(a[,2])
e<-data.frame(Var1=e)
d<-merge(d,e, all=T)
d$Freq=ifelse(is.na(d$Freq), 0,d$Freq)
d<-t(d)
colnames(d)=d[1,]
d<-d[-1,]
d<-as.data.frame(t(d))
rownames(d)=NULL
c<-data.frame(FullSampleName=a[i,1],
Consensious_Call=ifelse(length(c[c$Freq==max(c$Freq), "Var1"])>1, "No_Call", as.factor(c[c$Freq==max(c$Freq), "Var1"])),
d)
View(c)
c<-as.data.frame(table(t(a[i,2:ncol(a)])))
d<-c
e<-levels(a[,2])
e<-data.frame(Var1=e)
d<-merge(d,e, all=T)
d$Freq=ifelse(is.na(d$Freq), 0,d$Freq)
d<-t(d)
colnames(d)=d[1,]
d<-d[-1,]
d<-as.data.frame(t(d))
rownames(d)=NULL
c<-data.frame(FullSampleName=a[i,1],
Consensious_Call=ifelse(length(c[c$Freq==max(c$Freq), "Var1"])>1, "No_Call", as.character(c[c$Freq==max(c$Freq), "Var1"])),
d)
View(c)
library(HaploCatcher)
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("gene_comp")
#split the total data into training and test
set.seed(022294)
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
set.seed(NULL)
#run auto_locus with voting in parallel with five perms of CV and five votes for the consensus call
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
predict_by_vote = TRUE,
parallel = TRUE,
plot_cv_results = TRUE,
verbose = TRUE,
n_perms = 5,
n_votes = 5)
View(results)
View(results[["consensious_predictions"]])
library(HaploCatcher)
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("gene_comp")
#split the total data into training and test
set.seed(022294)
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
set.seed(NULL)
#run auto_locus with voting in parallel with five perms of CV and five votes for the consensus call
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
predict_by_vote = TRUE,
parallel = TRUE,
n_perms = 5,
n_votes = 5)
#run auto_locus without voting over five perms of CV
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
n_perms = 5)
library(HaploCatcher)
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("gene_comp")
#split the total data into training and test
set.seed(022294)
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
set.seed(NULL)
#run auto_locus without voting over five perms of CV with hets included
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
set_seed = 022294,
n_perms = 5,
include_hets = TRUE)
#look at predictions
head(results$predictions)
#run auto_locus with hets included while voting in parallel with five perms of CV and five votes for the consensus call
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
predict_by_vote = TRUE,
parallel = TRUE,
n_perms = 5,
n_votes = 5)
View(results)
#look at the consensus prediction
head(results$consensious_predictions)
#run auto_locus with hets included while voting in parallel with five perms of CV and five votes for the consensus call
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
include_hets = TRUE,
predict_by_vote = TRUE,
parallel = TRUE,
n_perms = 5,
n_votes = 5)
#look at the consensus prediction
head(results$consensious_predictions)
View(results)
View(results[["consensious_predictions"]])
#run auto_locus without hets and no feedback for five permutations of CV and five votes
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
n_perms = 5,
n_votes = 5,
verbose = FALSE)
library(HaploCatcher)
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("gene_comp")
#split the total data into training and test
set.seed(022294)
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
set.seed(NULL)
#run auto_locus without voting over five perms of CV with hets included
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
set_seed = 022294,
n_perms = 5,
include_hets = TRUE)
#run auto_locus without hets and no feedback for five permutations of CV and five votes
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
n_perms = 5,
n_votes = 5,
verbose = FALSE)
#look at the consensus prediction
head(results$predictions)
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("gene_comp")
#split the total data into training and test
set.seed(022294)
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
set.seed(NULL)
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
library(HaploCatcher)
#read in the gene compendium file
data("gene_comp")
#split the total data into training and test
set.seed(022294)
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
set.seed(NULL)
#run auto_locus without voting over five perms of CV with hets included
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
set_seed = 022294,
n_perms = 5,
include_hets = TRUE)
#run auto_locus without voting over five perms of CV with hets included
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
#set_seed = 022294,
n_perms = 5,
include_hets = TRUE)
#run auto_locus base function with minimum needed input
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
set_seed = 022294)
#look at predictions
head(results$predictions)
View(results)
names(results)
#run auto_locus with hets included while voting in parallel with five perms of CV and five votes for the consensus call
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
include_hets = TRUE,
predict_by_vote = TRUE,
parallel = TRUE,
n_perms = 5,
n_votes = 5)
#run auto_locus with hets included while voting in parallel with five perms of CV and five votes for the consensus call
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
include_hets = TRUE,
predict_by_vote = TRUE,
parallel = TRUE,
n_perms = 5,
n_votes = 5,
verbose = FALSE)
names(results)
library(HaploCatcher)
?auto_locus
remove.packages("HaploCatcher")
library(HaploCatcher)
library(HaploCatcher)
library(HaploCatcher)
?auto_locus
library(HaploCatcher)
?auto_locus
library(HaploCatcher)
library(HaploCatcher)
?auto_locus
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("gene_comp")
#split the total data into training and test
set.seed(022294)
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
set.seed(NULL)
#run auto_locus without voting over five perms of CV with hets included
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
set_seed = 022294,
n_perms = 5,
include_hets = TRUE)
library(HaploCatcher)
library(HaploCatcher)
library(HaploCatcher)
?.foreachGlobals
??.foreachGlobals
?foreach:::.foreachGlobals
?':::'
maintainer("HaploCatcher")
maintainer("HaploCatcher")
maintainer("foreach")
?registerDoSEQ
library(HaploCatcher)
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("gene_comp")
#split the total data into training and test
set.seed(022294)
training_genotypes=sample(rownames(geno_mat), size = round(nrow(geno_mat)*0.8, 0))
testing_genotypes=rownames(geno_mat)[!rownames(geno_mat) %in% training_genotypes]
set.seed(NULL)
#run auto_locus without voting over five perms of CV with hets included
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
set_seed = 022294,
n_perms = 5,
include_hets = TRUE)
#run auto_locus with hets included while voting in parallel with five perms of CV and five votes for the consensus call
results<-auto_locus(geno_mat = geno_mat,
gene_file = gene_comp,
gene_name = "sst1_solid_stem",
marker_info = marker_info,
chromosome = "3B",
training_genotypes = training_genotypes,
testing_genotypes = testing_genotypes,
include_hets = TRUE,
predict_by_vote = TRUE,
parallel = TRUE,
n_perms = 5,
n_votes = 5)
remove.packages("HaploCatcher")
devtools::install_github("zjwinn/HaploCatcher")
library(HaploCatcher)
?auto_locus
library(HaploCatcher)
