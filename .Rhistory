classification<-classification[!classification$Call %in% classification$Call[grep("het_", classification$Call)], ]
}else if(!is.logical(include_hets)){
base::stop("Argument 'include_hets' must be a logical argument! (TRUE or FALSE)")
}else{
if(verbose==TRUE){base::print("Note: User has requested heterozygous calls remain in the dataset")}
}
#check if
if(percent_training>1 | percent_training<0 | !base::is.numeric(percent_training)){
base::stop("'percent_training' is a non-integer, numeric variable bound between 0 and 1!")
}
#define the training
training<-classification[base::sample(1:nrow(classification), size = percent_training*nrow(classification)),]
#check if
if(percent_testing>1 | percent_testing<0 | !base::is.numeric(percent_testing)){
base::stop("'percent_testing' is a non-integer, numeric variable bound between 0 and 1!")
}else if(percent_training+percent_testing>1){
base::stop("'percent_testing'+'percent_training' cannot be greater than 1!")
}
#define the test
test<-classification[!classification$FullSampleName %in% training$FullSampleName,]
#check if
if(base::unique(base::duplicated(rownames(geno_mat)))>1){
base::stop("There are duplicated individuals in the 'geno_mat'!")
}else if(!base::is.numeric(geno_mat)){
base::stop("The 'geno_mat' contains non-numeric markers!")
}
#pull genetic information for individuals
geno_matrix<-geno_mat[base::rownames(geno_mat) %in% classification$FullSampleName,]
#check if
if(base::class(base::try(base::ncol(marker_info[,c("Marker", "Chromosome", "BP_Position")])))=="try-error"){
base::stop("columns are misnamed or missing in the 'marker_info'!")
}else if(!chromosome %in% marker_info$Chromosome){
base::stop("'chromosome' is not defined in the 'marker_info' chromosome column!")
}
#subset markers
selected_markers<-marker_info[marker_info$Chromosome==chromosome,]
#pull markers
geno_matrix<-geno_matrix[,base::colnames(geno_matrix) %in% selected_markers$Marker]
#check if
if(base::unique(training$FullSampleName %in%  base::rownames(geno_matrix))>1){
base::stop("Individuals in the training parition are not found in the 'geno_mat'!")
}
#pull training individuals
geno_sub_training<-geno_matrix[base::rownames(geno_matrix) %in% training$FullSampleName,]
#order the markers
geno_sub_training<-geno_sub_training[base::order(base::rownames(geno_sub_training)), ]
#order the fullsamplenames in training
training<-training[base::order(training$FullSampleName),]
#cbind
training<-base::cbind(training, geno_sub_training)
#make a correlation set
corr<-training[,c("Call", base::colnames(geno_sub_training))]
corr$Call<-base::match(corr$Call, unique(corr$Call))
corr[,1:base::ncol(corr)]<-base::lapply(corr[,1:base::ncol(corr)], base::as.numeric)
#perform correlation
corr<-base::suppressWarnings(base::round(stats::cor(corr), 10))
corr<-base::data.frame("|r|"=corr[-1,1],
check.names = FALSE)
corr$`|r|`<-base::abs(corr$`|r|`)
corr$marker<-base::rownames(corr)
corr$BP_Position<-selected_markers$BP_Position
corr$MBP_Position<-base::round(base::as.numeric(corr$BP_Position)/1000000, 2)
#plot results
if(verbose==TRUE){
base::plot(x=corr$MBP_Position,
y=corr$`|r|`,
main = base::paste("Correlational Study of markers on", chromosome, "for", gene_name),
xlab = "Megabasepair (Mbp) Position",
ylab = "Absolute Value of Correlation (|r|)")
}
#plot threshold
corr<-corr[base::order(corr$`|r|`, decreasing = TRUE),]
corr<-corr[1:ncor_markers,]
#plot threshold line
if(verbose==TRUE){
graphics::abline(h=min(corr$`|r|`), col = "red", lty=2)
graphics::legend("bottomleft",legend=base::paste("Top", ncor_markers, "correlated markers thresold"),  col = "red", lty = 2 )
}
#pull markers in training
training<-training[,
c("FullSampleName",
"Call",
corr$marker)]
#subset markers and bind them to testing set
geno_sub_testing<-geno_matrix[base::rownames(geno_matrix) %in% test$FullSampleName,
base::colnames(geno_matrix) %in% corr$marker]
geno_sub_testing<-geno_sub_testing[base::order(rownames(geno_sub_testing)),]
test<-test[base::order(test$FullSampleName),]
#cbind
test<-base::cbind(test,geno_sub_testing)
#select
test<-test[,
c("FullSampleName",
"Call",
corr$marker)]
#format datasets
training[,1:2]<-base::lapply(training[,1:2], base::as.factor)
test[,1:2]<-base::lapply(test[,1:2], as.factor)
training[,3:base::ncol(training)]<-base::lapply(training[,3:base::ncol(training)], base::as.numeric)
test[,3:base::ncol(test)]<-base::lapply(test[,3:base::ncol(test)], base::as.numeric)
#show frequency in the testing population
if(verbose==TRUE){
a<-base::data.frame(base::table(training$Call)/ base::nrow(training))
base::colnames(a)=c("Call", "Frequency")
print(knitr::kable(a, caption = "Frequency of Calls in Training", digits = 2))
a<-base::data.frame(base::table(test$Call)/ base::nrow(test))
base::colnames(a)=c("Call", "Frequency")
print(knitr::kable(a, caption = "Frequency of Calls in Test", digits = 2))
}
#make sure they are dataframes
training<-base::as.data.frame(training)
test<-base::as.data.frame(test)
#make folds
fold<-caret::createFolds(training[,2], k = 5)
#make train control
cont_train<-caret::trainControl(classProb = TRUE,
verboseIter = FALSE,
savePredictions = TRUE,
index = fold,
number = 5,
repeats = 1000,
method = "repeatedcv")
#send message
if(verbose==TRUE){print("Note: Running Models...")}
#make grid
grid_tune<-base::expand.grid(k = base::seq(from = 1,
to = (base::ncol(test)-2),
by = 2))
#fit model
fit_1<-caret::train(Call ~ .,
data = training[,-1],
method = "knn",
tuneGrid = grid_tune,
trControl = cont_train)
#make grid
grid_tune<-base::expand.grid(mtry = c(1, base::seq(from = 5,
to = (base::ncol(test)-2),
by = 5)))
#fit model
fit_2<-caret::train(Call ~ .,
data = training[,-1],
method = "rf",
tuneGrid = grid_tune,
trControl = cont_train)
#send message
if(verbose==TRUE){base::print("Note: Done!")}
if(verbose==TRUE){base::print("Note: Displaying cross validation tuning results...")}
#summary of models
if(verbose==TRUE){
base::print(fit_1)
base::print(fit_2)
}
#send message
if(verbose==TRUE){base::print("Note: Producing predictions and calculating confusion matricies on the test population")}
#predict
pred_1<-stats::predict(fit_1, test[,-1])
pred_1<-base::data.frame(FullSampleName=test[,1],
Model = "K-Nearest Neighbors",
Gene=gene_name,
Observed_Call=test[,2],
Predicted_Call=pred_1)
pred_2<-stats::predict(fit_2, test[,-1])
pred_2<-base::data.frame(FullSampleName=test[,1],
Model = "Random Forest",
Gene=gene_name,
Observed_Call=test[,2],
Predicted_Call=pred_2)
#calculate confusion matraix
confu_1<-caret::confusionMatrix(pred_1$Observed_Call,
pred_1$Predicted_Call)
confu_2<-caret::confusionMatrix(pred_2$Observed_Call,
pred_2$Predicted_Call)
#show tables
if(verbose==TRUE){
base::print(knitr::kable(confu_1$table, caption = "Confusion matrix of K-Nearest Neighbors predictions"))
base::print(knitr::kable(confu_2$table, caption = "Confusion matrix of Random Forest predictions"))
}
#show results of models
a<-base::data.frame(Parameters=names(confu_1$overall),
`K-Nearest Neighbors`=confu_1$overall,
`Random Forest`=confu_2$overall,
check.names = FALSE,
row.names = NULL)
a$Parameters=c("Accuracy",
"Kappa",
"Accuracy_Lower_CI",
"Accuracy_Upper_CI",
"Accuracy_Null",
"Accuracy_P_Value",
"Mcnemar_P_Value")
base::print(knitr::kable(a, caption = "Overall Accuracy Parameters", digits = 3))
if(verbose==TRUE){
base::print(knitr::kable(a, caption = "Overall Accuracy Parameters", digits = 3))
}
#show results of models
if(include_hets==FALSE){
a<-base::data.frame(Parameters=names(confu_1$byClass),
`K-Nearest Neighbors`=confu_1$byClass,
`Random Forest`=confu_2$byClass,
check.names = FALSE,
row.names = NULL)
a<-a[c(1,2,5,6,11),]
a$Parameters[5]="Balanced_Accuracy"
base::rownames(a)=NULL
if(verbose==TRUE){
base::print(knitr::kable(a, caption = "By-Class Accuracy Parameters", digits = 3))
}
}
a<-base::as.data.frame(base::rbind(confu_1$byClass, confu_2$byClass))
a$Model=c(base::rep("K-Nearest Neighbors", 3), base::rep("Random Forest",3))
a$Class=base::rownames(a)
library(HaploCatcher)
ncor_markers=50
#set wd
setwd("C:/Users/zwinn/OneDrive/Publication/Manuscripts In Progress/HC for SF/Analysis")
pheno<-read.csv("pheno_coded.csv")
library(HaploCatcher)
data("geno_mat")
data("marker_info")
data("gene_comp")
#### for locus_train ####
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("gene_comp")
#run the function with hets
fit1<-locus_train(geno_mat=geno_mat, #the genotypic matrix
gene_file=gene_comp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
include_hets=TRUE, #include hets in the model
verbose = TRUE, #allows for text and graph output
set_seed=022294, #sets a seed for reproduction of results
models="all") #sets what models are requested
library(HaploCatcher)
#### for locus_train ####
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("gene_comp")
#run the function with hets
fit1<-locus_train(geno_mat=geno_mat, #the genotypic matrix
gene_file=gene_comp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
include_hets=TRUE, #include hets in the model
verbose = TRUE, #allows for text and graph output
set_seed=022294, #sets a seed for reproduction of results
models="all") #sets what models are requested
#### for locus_perm_cv ####
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("gene_comp")
#run permutational analysis
fit<-locus_perm_cv(n_perms = 2, #the number of permutations
geno_mat=geno_mat, #the genotypic matrix
gene_file=gene_comp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
percent_testing=0.2, #percentage of genotypes in the validation set
percent_training=0.8, #percentage of genotypes in the training set
include_hets=FALSE, #excludes hets in the model
include_models=FALSE, #excludes models in results object
verbose = FALSE) #excludes text
#### for plot_locus_perm_cv ####
plot_locus_perm_cv(fit)
if(base::is.list(results)==FALSE|
base::length(base::names(results))<5|
base::length(base::names(results))>5){
base::stop("Object provided to function is not a list or is not a list derived from the function 'locus_perm_cv'!")
}
results=fit
if(base::is.list(results)==FALSE|
base::length(base::names(results))<5|
base::length(base::names(results))>5){
base::stop("Object provided to function is not a list or is not a list derived from the function 'locus_perm_cv'!")
}
#this line is so that the devtools::check passes
Accuracy<-Kappa<-Sensitivity<-Specificity<-Model<-Class<-NULL
if(base::is.null(results$By_Class_Parameters$Class)){
a<-results$Overall_Parameters
b<-ggplot2::ggplot(data = a, ggplot2::aes(y=Accuracy, x=Model, fill=Model))+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank())+
ggplot2::labs(title = "Overall Accuracy")
c<-ggplot2::ggplot(data = a, ggplot2::aes(y=Kappa, x=Model, fill=Model))+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
legend.position = "none")+
ggplot2::labs(title = "Overall Kappa")
a<-results$By_Class_Parameters
d<-ggplot2::ggplot(data = a, ggplot2::aes(y=Sensitivity, x=Model, fill=Model))+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
legend.position = "none")+
ggplot2::labs(title = "Overall Sensitivity")
e<-ggplot2::ggplot(data = a, ggplot2::aes(y=Specificity, x=Model, fill=Model))+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
legend.position = "none")+
ggplot2::labs(title = "Overall Specificity")
if(individual_images==TRUE){
base::print(b)
base::print(c)
base::print(d)
base::print(e)
}
f<-((b+c)/(d+e))+
patchwork::plot_layout(guides = "collect")
base::print(f)
}else{
a<-results$Overall_Parameters
b<-ggplot2::ggplot(data = a, ggplot2::aes(y=Accuracy, x=Model, fill=Model))+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank())+
ggplot2::labs(title = "Overall Accuracy")
c<-ggplot2::ggplot(data = a, ggplot2::aes(y=Kappa, x=Model, fill=Model))+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
legend.position = "none")+
ggplot2::labs(title = "Overall Kappa")
a<-results$By_Class_Parameters
d<-ggplot2::ggplot(data = a, ggplot2::aes(y=Sensitivity, x=Model, fill=Model))+
ggplot2::facet_grid(~base::paste("Class =", Class))+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
legend.position = "none")+
ggplot2::labs(title = "By-Class Sensitivity")
e<-ggplot2::ggplot(data = a, ggplot2::aes(y=Specificity, x=Model, fill=Model))+
ggplot2::facet_grid(~base::paste("Class =", Class))+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
legend.position = "none")+
ggplot2::labs(title = "By-Class Specificity")
if(individual_images==TRUE){
base::print(b)
base::print(c)
base::print(d)
base::print(e)
}
f<-((b+c)/(d+e))+
patchwork::plot_layout(guides = "collect")
base::print(f)
}
individual_images=FALSE
base::is.null(results$By_Class_Parameters$Class)
#run permutational analysis
fit<-locus_perm_cv(n_perms = 2, #the number of permutations
geno_mat=geno_mat, #the genotypic matrix
gene_file=gene_comp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
percent_testing=0.2, #percentage of genotypes in the validation set
percent_training=0.8, #percentage of genotypes in the training set
include_hets=TRUE, #excludes hets in the model
include_models=FALSE, #excludes models in results object
verbose = FALSE) #excludes text
#### for plot_locus_perm_cv ####
plot_locus_perm_cv(fit)
a<-results$Overall_Parameters
View(a)
base::is.null(results$By_Class_Parameters$Class)
results=fit
base::is.null(results$By_Class_Parameters$Class)
a<-results$By_Class_Parameters
View(a)
a<-results$By_Class_Parameters
a$Class<-ifelse(a$Class %in% a$Class[grep("non_",a$Class, ignore.case = TRUE)], "-/-",
ifelse(a$Class %in% a$Class[grep("het_", a$Class, ignore.case = TRUE)], "+/-", "+/+"))
View(a)
a<-results$Overall_Parameters
b<-ggplot2::ggplot(data = a, ggplot2::aes(y=Accuracy, x=Model, fill=Model))+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank())+
ggplot2::labs(title = "Overall Accuracy")
c<-ggplot2::ggplot(data = a, ggplot2::aes(y=Kappa, x=Model, fill=Model))+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
legend.position = "none")+
ggplot2::labs(title = "Overall Kappa")
a<-results$By_Class_Parameters
a$Class<-ifelse(a$Class %in% a$Class[grep("non_",a$Class, ignore.case = TRUE)], "-/-",
ifelse(a$Class %in% a$Class[grep("het_", a$Class, ignore.case = TRUE)], "+/-", "+/+"))
a$Class<-factor(a$Class, levels = c("+/+", "+/-", "-/-"))
d<-ggplot2::ggplot(data = a, ggplot2::aes(y=Sensitivity, x=Model, fill=Model))+
ggplot2::facet_grid(~base::paste(Class))+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
legend.position = "none")+
ggplot2::labs(title = "By-Class Sensitivity")
e<-ggplot2::ggplot(data = a, ggplot2::aes(y=Specificity, x=Model, fill=Model))+
ggplot2::facet_grid(~base::paste(Class))+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
legend.position = "none")+
ggplot2::labs(title = "By-Class Specificity")
f<-((b+c)/(d+e))+
patchwork::plot_layout(guides = "collect")
base::print(f)
#### for locus_perm_cv ####
#read in the genotypic data matrix
data("geno_mat")
#read in the marker information
data("marker_info")
#read in the gene compendium file
data("gene_comp")
#run permutational analysis
fit<-locus_perm_cv(n_perms = 2, #the number of permutations
geno_mat=geno_mat, #the genotypic matrix
gene_file=gene_comp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
percent_testing=0.2, #percentage of genotypes in the validation set
percent_training=0.8, #percentage of genotypes in the training set
include_hets=TRUE, #excludes hets in the model
include_models=FALSE, #excludes models in results object
verbose = FALSE) #excludes text
library(HaploCatcher)
#run permutational analysis
fit<-locus_perm_cv(n_perms = 2, #the number of permutations
geno_mat=geno_mat, #the genotypic matrix
gene_file=gene_comp, #the gene compendium file
gene_name="sst1_solid_stem", #the name of the gene
marker_info=marker_info, #the marker information file
chromosome="3B", #name of the chromosome
ncor_markers=50, #number of markers to retain
percent_testing=0.2, #percentage of genotypes in the validation set
percent_training=0.8, #percentage of genotypes in the training set
include_hets=TRUE, #excludes hets in the model
include_models=FALSE, #excludes models in results object
verbose = FALSE) #excludes text
#### for plot_locus_perm_cv ####
plot_locus_perm_cv(fit)
results=fit
a<-results$Overall_Parameters
b<-ggplot2::ggplot(data = a, ggplot2::aes(y=Accuracy, x=Model, fill=Model))+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank())+
ggplot2::labs(title = "Overall Accuracy")
c<-ggplot2::ggplot(data = a, ggplot2::aes(y=Kappa, x=Model, fill=Model))+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
legend.position = "none")+
ggplot2::labs(title = "Overall Kappa")
a<-results$By_Class_Parameters
a$Class<-ifelse(a$Class %in% a$Class[grep("non_",a$Class, ignore.case = TRUE)], "-/-",
ifelse(a$Class %in% a$Class[grep("het_", a$Class, ignore.case = TRUE)], "+/-", "+/+"))
a$Class<-factor(a$Class, levels = c("+/+", "+/-", "-/-"))
d<-ggplot2::ggplot(data = a, ggplot2::aes(y=Sensitivity, x=Model, fill=Model))+
ggplot2::facet_grid(~Class)+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
legend.position = "none")+
ggplot2::labs(title = "By-Class Sensitivity")
e<-ggplot2::ggplot(data = a, ggplot2::aes(y=Specificity, x=Model, fill=Model))+
ggplot2::facet_grid(~Class)+
ggplot2::geom_boxplot()+
ggplot2::theme_bw()+
ggplot2::theme(axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
legend.position = "none")+
ggplot2::labs(title = "By-Class Specificity")
f<-((b+c)/(d+e))+
patchwork::plot_layout(guides = "collect")
base::print(f)
